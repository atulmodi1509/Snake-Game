#include <iostream>
#include <conio.h>
#include <windows.h>

using namespace std;

#define Max_length 1000

const char Dir_up = 'U';
const char Dir_down = 'D';
const char Dir_left = 'L';
const char Dir_right = 'R';

int consoleWidth, consoleHeight;

void initscreen() // return info about screen
{
    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
    CONSOLE_SCREEN_BUFFER_INFO csbi;
    GetConsoleScreenBufferInfo(hConsole, &csbi);
    consoleHeight = csbi.srWindow.Bottom - csbi.srWindow.Top + 1;
    consoleWidth = csbi.srWindow.Right - csbi.srWindow.Left + 1;
}

struct point
{
    int xCord;
    int yCord;

    point()
    {
    }
    point(int x, int y)
    {
        xCord = x;
        yCord = y;
    }
};

class Snake
{
    int length;
    char direction;

public:
    point body[Max_length];

    Snake(int x, int y)
    {
        length = 1;
        body[0] = point(x, y);
        direction = Dir_right;
    }

    // ~Snake()
    // {
    //     delete[] body;
    // }

    int getLength()
    {
        return length;
    }

    void changeDirection(char newDirection)
    {
        if (newDirection == Dir_up && direction != Dir_down)
            direction = newDirection;

        else if (newDirection == Dir_down && direction != Dir_up)
            direction = newDirection;

        else if (newDirection == Dir_left && direction != Dir_right)
            direction = newDirection;

        else if (newDirection == Dir_right && direction != Dir_left)
            direction = newDirection;
    }

    bool move(point food)
    {
        for (int i = length - 1; i > 0; i--)
        {
            body[i] = body[i - 1];
        }

        switch (direction)
        {
            int val;

        case Dir_up:
            val = body[0].yCord;
            body[0].yCord = val - 1;
            break;
        case Dir_down:
            val = body[0].yCord;
            body[0].yCord = val + 1;
            break;
        case Dir_right:
            val = body[0].xCord;
            ;
            body[0].xCord = val + 1;
            break;
        case Dir_left:
            val = body[0].xCord;
            body[0].xCord = val - 1;
            break;
        }

        // if snake bite itself

        for (int i = 1; i < length; i++)
        {
            if (body[0].xCord == body[i].xCord && body[0].yCord == body[i].yCord)
            {
                return false;
            }
        }

        // touch boundry
        if (body[0].xCord < 0 || body[0].yCord < 0 || body[0].xCord == consoleWidth || body[0].yCord == consoleHeight)
        {
            return false;
        }

        // if snake eats food
        if (food.xCord == body[0].xCord && food.yCord == body[0].yCord)
        {
            body[length] = point(body[length - 1].xCord, body[length - 1].yCord);
            length++;
        }

        return true;
    }
};

class Board
{
    Snake *snake;
    const char SNAKE = 'O';
    point food;
    const char FOOD = 'o';
    int score;

public:
    Board()
    {
        spawnFood();
        snake = new Snake(10, 10);
        score = 0;
    }

    ~Board()
    {
        delete snake;
    }

    int getScore()
    {
        return score;
    }

    void displayCurrScore()
    {
        goToXY(consoleWidth / 2, 0);
        cout << "Current Score : " << score;
    }
    void goToXY(int x, int y)
    {
        COORD coord;
        coord.X = x;
        coord.Y = y;
        SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
    }

    void draw()
    {
        system("cls");
        for (int i = 0; i < snake->getLength(); i++)
        {
            goToXY(snake->body[i].xCord, snake->body[i].yCord);
            cout << SNAKE;
        }
        goToXY(food.xCord, food.yCord);
        cout << FOOD;

        displayCurrScore();
    }

    void spawnFood()
    {
        int x = rand() % consoleWidth;
        int y = rand() % consoleHeight;
        food = point(x, y);
    }

    bool update()
    {
        bool isAlive = snake->move(food);
        if (isAlive == false)
            return false;

        if (food.xCord == snake->body[0].xCord && food.yCord == snake->body[0].yCord)
        {
            score++;
            spawnFood();
        }
        return true;
    }
    void getinput()
    {
        if (kbhit())
        {
            int key = getch();
            if (key == 'w' || key == 'W')
            {
                snake->changeDirection(Dir_up);
            }
            else if (key == 'a' || key == 'A')
            {
                snake->changeDirection(Dir_left);
            }
            else if (key == 's' || key == 'S')
            {
                snake->changeDirection(Dir_down);
            }
            else if (key == 'd' || key == 'D')
            {
                snake->changeDirection(Dir_right);
            }
        }
    }
};

int main()
{
    srand(time(0));
    initscreen();
    Board *board = new Board;
    while (board->update())
    {
        board->getinput();
        board->draw();
        Sleep(100);
    }

    cout << endl
         << "Game Over" << endl;
    cout << "Final Score is : " << board->getScore();

    return 0;
}
